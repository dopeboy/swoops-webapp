# Generated by Django 4.0.6 on 2022-07-29 18:23

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BoxScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ast", models.IntegerField(help_text="Assists")),
                ("blk", models.IntegerField(help_text="Blocks")),
                ("drb", models.IntegerField(help_text="Defensive rebounds")),
                ("fg", models.IntegerField(help_text="Field goals")),
                ("fg_pct", models.FloatField(help_text="Field goal percentage")),
                ("fga", models.IntegerField(help_text="Field goal attempts")),
                ("ft", models.IntegerField(help_text="Free throws")),
                ("ft_pct", models.FloatField(help_text="Free throw percentage")),
                ("fta", models.IntegerField(help_text="Free throw attempts")),
                ("orb", models.IntegerField(help_text="Offensive rebounds")),
                ("pf", models.IntegerField(help_text="Personal fouls")),
                ("pts", models.IntegerField(help_text="Points")),
                ("stl", models.IntegerField(help_text="Steals")),
                ("three_p", models.IntegerField(help_text="Three pointers")),
                ("three_p_pct", models.FloatField(help_text="Three point percentage")),
                ("three_pa", models.IntegerField(help_text="Three point attempts")),
                ("tov", models.IntegerField(help_text="Turnovers")),
                ("trb", models.IntegerField(help_text="Total rebounds")),
                ("two_p", models.IntegerField(help_text="Two pointers")),
                ("two_p_pct", models.FloatField(help_text="Two point percentage")),
                ("two_pa", models.IntegerField(help_text="Two point attempts")),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                ("uuid", models.UUIDField(primary_key=True, serialize=False)),
                ("token", models.IntegerField(null=True, unique=True)),
                ("first_name", models.CharField(max_length=64)),
                ("last_name", models.CharField(max_length=64)),
                ("height", models.IntegerField()),
                ("strength", models.IntegerField()),
                ("speed", models.IntegerField()),
                ("jumping", models.IntegerField()),
                ("endurance", models.IntegerField()),
                ("low_post_scoring", models.IntegerField()),
                ("dunking", models.IntegerField()),
                ("free_throw_shooting", models.IntegerField()),
                ("point_jump_shot_ability", models.IntegerField()),
                ("three_point_shooting", models.IntegerField()),
                ("offensive_iq", models.IntegerField()),
                ("defensive_iq", models.IntegerField()),
                ("dribbling", models.IntegerField()),
                ("passing", models.IntegerField()),
                ("rebounding", models.IntegerField()),
                ("image_url", models.URLField()),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("PG", "Point Guard"),
                            ("SG", "Shooting Guard"),
                            ("SF", "Small Forward"),
                            ("PF", "Power Forward"),
                            ("C", "Center"),
                        ],
                        max_length=2,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("lineup_1_score", models.IntegerField()),
                ("lineup_2_score", models.IntegerField()),
                (
                    "lineup_1_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_1_player_1_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_1_player_2_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_1_player_3_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_1_player_4_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_1_player_5_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_2_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_2_player_1_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_2_player_2_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_2_player_3_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_2_player_4_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
                (
                    "lineup_2_player_5_box_score",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="simulator.boxscore",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Simulation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lineup_1_uuids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), size=5
                    ),
                ),
                (
                    "lineup_2_uuids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), size=5
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        help_text="The simulator UUID if successfully created",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("N", "Not Created"),
                            ("P", "Pending"),
                            ("S", "Started"),
                            ("F", "Finished"),
                            ("E", "Errored"),
                            ("T", "Timed Out"),
                        ],
                        default="N",
                        max_length=1,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "error_msg",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="The error message if one occurred",
                    ),
                ),
                (
                    "num_retries",
                    models.IntegerField(
                        default=0, help_text="The number of times we have retried"
                    ),
                ),
                (
                    "next_retry_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "result",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="simulator.result",
                    ),
                ),
            ],
            options={
                "index_together": {("status", "num_retries")},
            },
        ),
    ]
