# Generated by Django 4.0.5 on 2023-06-24 04:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("simulator", "0022_teamgamestats"),
    ]

    operations = [
        migrations.CreateModel(
            name="AllTimePlayerStatsView",
            fields=[
                ("player_id", models.UUIDField(primary_key=True, serialize=False)),
                ("count", models.IntegerField()),
                ("wins", models.IntegerField()),
                ("losses", models.IntegerField()),
                ("fg", models.FloatField()),
                ("ft", models.FloatField()),
                ("fpg", models.FloatField()),
                ("apg", models.FloatField()),
                ("bpg", models.FloatField()),
                ("drpg", models.FloatField()),
                ("fga", models.FloatField()),
                ("fta", models.FloatField()),
                ("orpg", models.FloatField()),
                ("ppg", models.FloatField()),
                ("spg", models.FloatField()),
                ("tpg", models.FloatField()),
                ("rpg", models.FloatField()),
                ("two_p", models.FloatField()),
                ("two_pa", models.FloatField()),
                ("three_p", models.FloatField()),
                ("three_pa", models.FloatField()),
                ("fg_pct", models.FloatField(null=True)),
                ("ft_pct", models.FloatField(null=True)),
                ("two_p_pct", models.FloatField(null=True)),
                ("three_p_pct", models.FloatField(null=True)),
            ],
            options={
                "db_table": "view_all_time_player_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CurrentSeasonPlayerStatsView",
            fields=[
                ("player_id", models.UUIDField(primary_key=True, serialize=False)),
                ("count", models.IntegerField()),
                ("wins", models.IntegerField()),
                ("losses", models.IntegerField()),
                ("fg", models.FloatField()),
                ("ft", models.FloatField()),
                ("fpg", models.FloatField()),
                ("apg", models.FloatField()),
                ("bpg", models.FloatField()),
                ("drpg", models.FloatField()),
                ("fga", models.FloatField()),
                ("fta", models.FloatField()),
                ("orpg", models.FloatField()),
                ("ppg", models.FloatField()),
                ("spg", models.FloatField()),
                ("tpg", models.FloatField()),
                ("rpg", models.FloatField()),
                ("two_p", models.FloatField()),
                ("two_pa", models.FloatField()),
                ("three_p", models.FloatField()),
                ("three_pa", models.FloatField()),
                ("fg_pct", models.FloatField(null=True)),
                ("ft_pct", models.FloatField(null=True)),
                ("two_p_pct", models.FloatField(null=True)),
                ("three_p_pct", models.FloatField(null=True)),
            ],
            options={
                "db_table": "view_current_season_player_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AllTimePlayerStatsViewProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("simulator.alltimeplayerstatsview",),
        ),
        migrations.CreateModel(
            name="CurrentSeasonPlayerStatsViewProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("simulator.currentseasonplayerstatsview",),
        ),
    ]
