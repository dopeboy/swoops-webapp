# Generated by Django 4.0.6 on 2022-07-11 20:55

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                ("played_at", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open"),
                            ("COMPLETE", "Complete"),
                            ("IN_PROGRESS", "In Progress"),
                        ],
                        default="OPEN",
                        max_length=20,
                    ),
                ),
                (
                    "entry_fee",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "payout",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                (
                    "height",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "strength",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "speed",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "jumping",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "endurance",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "low_post_scoring",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "ppg",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "rpg",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "abg",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                ("w_l", models.CharField(max_length=7, null=True)),
                (
                    "plus_minus",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "dunking",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "free_throw_shooting",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "point_jump_shot_ability",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "three_point_shooting",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "offensive_iq",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "defensive_iq",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "dribbling",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "passing",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                (
                    "rebounding",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MaxValueValidator(65),
                            django.core.validators.MinValueValidator(35),
                        ],
                    ),
                ),
                ("image_url", models.URLField(null=True)),
                (
                    "position",
                    models.IntegerField(
                        choices=[
                            (1, "First"),
                            (2, "Second"),
                            (3, "Third"),
                            (4, "Fourth"),
                            (5, "Fifth"),
                        ],
                        null=True,
                    ),
                ),
                ("token_id", models.IntegerField(null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=256)),
                ("wins", models.IntegerField(default=0)),
                ("loses", models.IntegerField(default=0)),
                (
                    "owner",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lineup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "player_five",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="api.player",
                    ),
                ),
                (
                    "player_four",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="api.player",
                    ),
                ),
                (
                    "player_one",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="api.player",
                    ),
                ),
                (
                    "player_three",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="api.player",
                    ),
                ),
                (
                    "player_two",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="api.player",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GameMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.game"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.player"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserPlayerNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("note", models.TextField()),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.player"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "player")},
            },
        ),
    ]
