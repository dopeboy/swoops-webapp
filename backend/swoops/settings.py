"""
Django settings for swoop project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import datetime as dt
import os
import socket
from datetime import timedelta
from pathlib import Path

import dj_database_url
import pgconnection
from celery.schedules import crontab
from configurations import Configuration, values


class Common(Configuration):
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = values.SecretValue(environ_prefix=None)

    JWT_SIGNING_KEY = values.SecretValue(environ_prefix=None)

    # SECURITY WARNING: don't run with debug turned on in production!
    # This env var exists automatically in every render instance
    DEBUG = values.BooleanValue(False, environ_prefix=None)

    ALLOWED_HOSTS = values.ListValue([], environ_prefix=None)

    # Application definition
    INSTALLED_APPS = [
        "django.contrib.auth",
        "django.contrib.admin",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        # 3rd party apps
        "rest_framework",
        "django_filters",
        "corsheaders",
        "pghistory",
        "pgtrigger",
        "django_otp",
        "django_otp.plugins.otp_totp",
        "django_otp.plugins.otp_static",
        "axes",
        "admincolors",
        # our apps
        "api.apps.ApiConfig",
        "accounts.apps.AccountsConfig",
        "eth",
        "game",
        "moderation",
        "simulator",
        "swoops",
    ]

    ADMIN_COLORS = [("Swoops", "css/admin.css")]

    REST_FRAMEWORK = {
        "DEFAULT_PERMISSION_CLASSES": [
            "rest_framework.permissions.IsAuthenticated",
        ],
        "DEFAULT_FILTER_BACKENDS": [
            "django_filters.rest_framework.DjangoFilterBackend",
        ],
        "DEFAULT_AUTHENTICATION_CLASSES": [
            "api.authentication.CsrfExemptSessionAuthentication",
            "rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication",
        ],
        "EXCEPTION_HANDLER": "api.exception_handlers.custom_exception_handler",
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
        "PAGE_SIZE": 100,
        "NUM_PROXIES": 2,  # Important for throttling
    }

    @property
    def SIMPLE_JWT(self):
        return {
            "ACCESS_TOKEN_LIFETIME": timedelta(days=31),
            "REFRESH_TOKEN_LIFETIME": timedelta(weeks=26),
            "ROTATE_REFRESH_TOKENS": False,
            "BLACKLIST_AFTER_ROTATION": False,
            "UPDATE_LAST_LOGIN": False,
            "ALGORITHM": "HS256",
            "SIGNING_KEY": self.JWT_SIGNING_KEY,
            "VERIFYING_KEY": None,
            "AUDIENCE": None,
            "ISSUER": None,
            "JWK_URL": None,
            "LEEWAY": 0,
            "AUTH_HEADER_TYPES": ("Bearer",),
            "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
            "USER_ID_FIELD": "id",
            "USER_ID_CLAIM": "user_id",
            "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",  # noqa: E501
            "AUTH_TOKEN_CLASSES": (
                "swoops.tokens.SwoopsPayloadToken",
                "rest_framework_simplejwt.tokens.AccessToken",
            ),
            "TOKEN_OBTAIN_SERIALIZER": (
                "swoops.serializers.SwoopsTokenObtainPairSerializer",
            ),
            "TOKEN_TYPE_CLAIM": "token_type",
            "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
            "JTI_CLAIM": "jti",
            "PAYLOAD_HANDLER": "swoops.utils.custom_jwt_payload_handler",
        }

    @property
    def MIDDLEWARE(self):
        swoops_middleware = [
            "corsheaders.middleware.CorsMiddleware",
            "django.middleware.security.SecurityMiddleware",
            "whitenoise.middleware.WhiteNoiseMiddleware",
            "django.contrib.sessions.middleware.SessionMiddleware",
            "django.middleware.common.CommonMiddleware",
            "django.middleware.csrf.CsrfViewMiddleware",
            "django.contrib.auth.middleware.AuthenticationMiddleware",
            "django_otp.middleware.OTPMiddleware",
            "django.contrib.messages.middleware.MessageMiddleware",
            "django.middleware.clickjacking.XFrameOptionsMiddleware",
            "axes.middleware.AxesMiddleware",
        ]

        if os.environ["DJANGO_CONFIGURATION"] in ["Development", "Staging"]:
            swoops_middleware = [
                "debug_toolbar.middleware.DebugToolbarMiddleware"
            ] + swoops_middleware

        return swoops_middleware

    ROOT_URLCONF = "swoops.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [os.path.join(BASE_DIR, "templates")],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "admincolors.context_processors.admin_theme",
                ]
            },
        }
    ]

    WSGI_APPLICATION = "swoops.wsgi.application"

    # Database
    # https://docs.djangoproject.com/en/4.0/ref/settings/#databases

    DATABASES = pgconnection.configure(
        {
            "default": dj_database_url.config(
                # Feel free to alter this value to suit your needs.
                default="postgresql://dev:dev@localhost:5432/swoops",
                conn_max_age=600,
            )
        }
    )

    # Password validation
    # https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": (
                "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"  # noqa: E501
            )
        },
        {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
        {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
        {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
    ]

    AUTHENTICATION_BACKENDS = [
        "axes.backends.AxesBackend",
        "django.contrib.auth.backends.ModelBackend",
        "accounts.backends.SuperuserAuthBackend",
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/4.0/topics/i18n/

    LANGUAGE_CODE = "en-us"

    TIME_ZONE = "UTC"

    USE_I18N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.0/howto/static-files/

    # This setting tells Django at which URL static files are going to
    # # be served to the user.
    # Here, they well be accessible at your-domain.onrender.com/static/...
    STATIC_URL = "/static/"
    STATIC_ROOT = "/var/www/html/static"

    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "assets"),
    ]

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

    AUTH_USER_MODEL = "accounts.User"

    # Logging
    # https://docs.djangoproject.com/en/4.0/topics/logging/
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "console": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"}
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "console",
            }
        },
        "loggers": {
            "root": {"level": "INFO", "handlers": ["console"]},
            "celery": {"level": "INFO", "handlers": ["console"]},
        },
    }

    # Celery
    # http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html#first-steps-with-django
    REDIS_URL = values.SecretValue(environ_prefix=None)

    @property
    def CELERY_BROKER_URL(self):
        return self.REDIS_URL

    CELERY_BEAT_SCHEDULE = {
        "simulator.tasks.update_simulated_games": {
            "task": "simulator.tasks.update_simulated_games",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_current_season_player_stats": {
            "task": "simulator.tasks.refresh_view_current_season_player_stats",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_all_time_player_stats": {
            "task": "simulator.tasks.refresh_view_all_time_player_stats",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_all_time_team_stats": {
            "task": "simulator.tasks.refresh_view_all_time_team_stats",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_current_season_player_stats_1_token": {
            "task": "simulator.tasks.refresh_view_current_season_player_stats_1_token",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_all_time_player_stats_1_token": {
            "task": "simulator.tasks.refresh_view_all_time_player_stats_1_token",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_current_season_player_stats_3_tokens": {
            "task": "simulator.tasks.refresh_view_current_season_player_stats_3_tokens",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_all_time_player_stats_3_tokens": {
            "task": "simulator.tasks.refresh_view_all_time_player_stats_3_tokens",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_current_season_player_stats_5_tokens": {
            "task": "simulator.tasks.refresh_view_current_season_player_stats_5_tokens",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_all_time_player_stats_5_tokens": {
            "task": "simulator.tasks.refresh_view_all_time_player_stats_5_tokens",
            "schedule": dt.timedelta(minutes=1),
        },
        "game.tasks.update_tournament_series": {
            "task": "game.tasks.update_tournament_series",
            "schedule": dt.timedelta(seconds=10),
        },
        "game.tasks.update_tournament_rounds": {
            "task": "game.tasks.update_tournament_rounds",
            "schedule": dt.timedelta(seconds=30),
        },
        # "simulator.tasks.check_all_players_exist_within_sim": {
        #     "task": "simulator.tasks.check_all_players_exist_within_sim",
        #     "schedule":dt.timedelta(hours=3),
        # },
        # "simulator.tasks.validate_player_agg_stats": {
        #     "task": "simulator.tasks.validate_player_agg_stats",
        #     "schedule": dt.timedelta(hours=3),
        # },
        "eth.tasks.sync_eth_transfers": {
            "task": "eth.tasks.sync_eth_transfers",
            "schedule": dt.timedelta(minutes=1),
        },
        "game.tasks.update_player_team_ownership": {
            "task": "game.tasks.update_player_team_ownership",
            "schedule": dt.timedelta(minutes=1),
        },
        "game.tasks.top_up_open_games_to_limit": {
            "task": "game.tasks.top_up_open_games_to_limit",
            "schedule": dt.timedelta(seconds=10),
        },
        # "game.tasks.sync_opensea_player_prices": {
        #    "task": "game.tasks.sync_opensea_player_prices",
        #    "schedule": dt.timedelta(minutes=120),
        # },
        "game.tasks.init_in_season_tournament": {
            "task": "game.tasks.init_in_season_tournament",
            "schedule": dt.timedelta(minutes=10),
        },
        "game.tasks.finalize_in_season_tournament": {
            "task": "game.tasks.finalize_in_season_tournament",
            "schedule": dt.timedelta(minutes=1),
        },
        "game.tasks.process_h2h_match_make_queue": {
            "task": "game.tasks.process_h2h_match_make_queue",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_current_season_team_leaderboard": {
            "task": "simulator.tasks.refresh_view_current_season_team_leaderboard",
            "schedule": dt.timedelta(minutes=1),
        },
        "simulator.tasks.refresh_view_current_season_team_sp": {
            "task": "simulator.tasks.refresh_view_current_season_team_sp",
            "schedule": dt.timedelta(minutes=1),
        },
        "game.tasks.initiate_payouts": {
            "task": "game.tasks.initiate_payouts",
            "schedule": crontab(hour="5-6"),  # 1am-2am ET
        },
        "game.tasks.confirm_payouts": {
            "task": "game.tasks.confirm_payouts",
            "schedule": crontab(hour="4-7"),  # 12am-3am ET
        },
        "game.tasks.check_balance": {
            "task": "game.tasks.check_balance",
            "schedule": crontab(hour=0, minute=30),  # 830pm ET
        },
        "game.tasks.grant_offchain_player_to_new_users": {
            "task": "game.tasks.grant_offchain_player_to_new_users",
            "schedule": dt.timedelta(minutes=2),
        },
    }

    MAX_PARTNER_GAMES_ALLOWED = values.IntegerValue(10.0, environ_prefix=None)

    @property
    def CACHES(self):
        return {
            "default": {
                "BACKEND": "django.core.cache.backends.redis.RedisCache",
                "LOCATION": self.REDIS_URL,
            }
        }

    # Using these options helps prevent broker deadlock and celery workers that
    # randomly stop running
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        "socket_timeout": 10,  # timeout in case of network errors
        "fanout_prefix": True,
        "fanout_patterns": True,
    }

    CELERY_ACCEPT_CONTENT = ["application/json"]
    CELERY_TASK_SERIALIZER = "json"
    CELERY_RESULT_SERIALIZER = "json"
    CELERY_TIMEZONE = TIME_ZONE
    # Celery >=4 tries to override logging and interferes with Sentry.
    # This setting helps fix it
    CELERYD_HIJACK_ROOT_LOGGER = False

    # When sentry is enabled, it is initialized in
    # backend/swoops/apps.py
    SENTRY_ENABLED = values.BooleanValue(False, environ_prefix=None)
    SENTRY_URL = values.SecretValue(environ_prefix=None)
    SENTRY_TRACE_SAMPLE_RATE = values.FloatValue(0.1, environ_prefix=None)

    # App-specific settings
    SWOOPS_IMAGE_BASEURL = values.SecretValue(environ_prefix=None)
    SWOOPS_APP_BASEURL = values.SecretValue(environ_prefix=None)
    API_EXTERNAL_HOSTNAME = values.Value(environ_prefix=None)
    SENDGRID_API_KEY = values.SecretValue(environ_prefix=None)
    SENDGRID_GAME_RESULTS_TEMPLATE_ID = values.Value(
        "d-16d38e6352aa492fae55d765ff0ffcf7", environ_prefix=None
    )

    SENDGRID_GENERAL_TEMPLATE_ID = values.Value(
        "d-c5addd67419b482891083998f0d925eb", environ_prefix=None
    )

    SENDGRID_WELCOME_EMAIL_TEMPLATE_ID = values.Value(
        "d-2a40c7c6b5564c7186655491c2bba299", environ_prefix=None
    )

    SENDGRID_EMAIL_VERIFICATION_TEMPLATE_ID = values.Value(
        "d-2b79248a262a4ee9b416ec7b072f1ad7", environ_prefix=None
    )

    # backend/simulator
    SIMULATOR_API_ROOT = values.SecretValue(environ_prefix=None)
    # Use the mock client for now until we have a simulator running
    SIMULATOR_CLIENT = values.SecretValue(environ_prefix=None)

    # backend/eth
    WEB3_PROVIDER = values.SecretValue(environ_prefix=None)
    GAS_ORACLE_API_KEY = values.SecretValue(environ_prefix=None)
    ETHEREUM_NETWORK = values.Value(environ_prefix=None)
    PAYOUT_WALLET_ADDRESS = values.Value(environ_prefix=None)
    PAYOUT_WALLET_PRIVATE_KEY = values.SecretValue(environ_prefix=None)
    PAYOUT_NOTIFICATION_WEBHOOK = values.Value(environ_prefix=None)
    SMART_CONTRACT_ADDRESS = values.SecretValue(environ_prefix=None)
    TOKEN_PURCHASE_INTENT_EXPIRY_SECONDS = values.IntegerValue(environ_prefix=None)

    RESERVATION_WINDOW_TIME_MIN = values.IntegerValue(3.0, environ_prefix=None)

    # email configuration
    EMAIL_FROM = values.SecretValue(environ_prefix=None)

    DJANGO_OTP_ENABLED = values.BooleanValue(False, environ_prefix=None)

    # used to limit the number of attempts for suspicious login attempts
    # renamed as DJANGO_OTP_ENABLED, because DJANGO_OTP depends
    # on suspicious login attempts
    AXES_ENABLED = os.environ.get("DJANGO_OTP_ENABLED", False)

    AXES_ONLY_ADMIN_SITE = values.BooleanValue(True, environ_prefix=None)
    AXES_FAILURE_LIMIT = values.IntegerValue(3, environ_prefix=None)
    AXES_COOLOFF_TIME = values.IntegerValue(1, environ_prefix=None)  # hours

    PLAYER_MAX_TOKEN_ID_ACCESSIBLE = values.IntegerValue(3556, environ_prefix=None)
    PLAYER_MIN_TOKEN_ID_ACCESSIBLE = values.IntegerValue(-50, environ_prefix=None)

    AUTH_ENABLED = values.BooleanValue(False, environ_prefix=None)

    # amazon images credentials
    AWS_IMAGES_BUCKET_ACCESS_KEY = values.SecretValue(environ_prefix=None)
    AWS_IMAGES_BUCKET_SECRET = values.SecretValue(environ_prefix=None)
    AWS_IMAGES_BUCKET_NAME = values.SecretValue(environ_prefix=None)

    @property
    def AWS_IMAGES_BUCKET_URL(self):
        return f"https://{self.AWS_IMAGES_BUCKET_NAME}.s3.us-west-2.amazonaws.com/"

    # amazon ugc credentials
    AWS_UGC_BUCKET_ACCESS_KEY = values.SecretValue(environ_prefix=None)
    AWS_UGC_BUCKET_SECRET = values.SecretValue(environ_prefix=None)
    AWS_UGC_BUCKET_NAME = values.SecretValue(environ_prefix=None)

    AWS_S3_TEMP_FOLDER = values.Value("__tmp__", environ_prefix=None)

    SWOOPS_FACTORY_HOST = values.Value("swoops-factory.vercel.app", environ_prefix=None)

    S3_HELPER = values.Value("services.s3_helper.S3Helper", environ_prefix=None)
    SWOOPS_FACTORY_CLIENT = values.Value(
        "services.swoops_factory_client.SwoopsFactoryClient", environ_prefix=None
    )

    IMGIX_IMAGES_API_KEY = values.SecretValue(environ_prefix=None)
    IMGIX_IMAGES_BASE_URL = values.SecretValue(environ_prefix=None)
    OPEN_GAMES_LIMIT = values.IntegerValue(6, environ_prefix=None)
    PRIZE_POOL_HOURLY_CAP_USD = values.IntegerValue(3, environ_prefix=None)

    # show the debug toolbar in Development and Staging
    if os.environ["DJANGO_CONFIGURATION"] in ["Development", "Staging"]:
        INSTALLED_APPS = INSTALLED_APPS + ["debug_toolbar"]

    @property
    def INTERNAL_IPS(self):
        if os.environ["DJANGO_CONFIGURATION"] in ["Development", "Staging"]:
            hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
            return [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1"]
        return []

    @property
    def DEBUG_TOOLBAR_CONFIG(self):
        if os.environ["DJANGO_CONFIGURATION"] in ["Development", "Staging"]:
            return {
                "SHOW_TOOLBAR_CALLBACK": lambda request: True,
            }
        return {}

    GAMES_ENABLED = values.BooleanValue(True, environ_prefix=None)

    OPENSEA_BASE_URL = values.Value(
        "https://testnets-api.opensea.io", environ_prefix=None
    )

    OPENSEA_API_KEY = values.Value("", environ_prefix=None)

    # The maximum number of open (unsimulated) games a team
    # can join at a time.
    OPEN_GAME_ENTRY_CAP = values.Value(10, environ_prefix=None)

    MAGIC_BELL_API_KEY = values.SecretValue(environ_prefix=None)
    MAGIC_BELL_API_SECRET = values.SecretValue(environ_prefix=None)
    CURRENT_TUTORIAL_VERSION = 1

    USER_SIGNUP_NOTIFICATION_WEBHOOK = values.Value(environ_prefix=None)


class Development(Common):
    DEBUG = values.BooleanValue(True, environ_prefix=None)
    CORS_ALLOW_CREDENTIALS = values.BooleanValue(True, environ_prefix=None)
    CORS_ALLOWED_ORIGINS = values.ListValue(
        ["http://127.0.0.1:3000", "http://127.0.0.1:3001"], environ_prefix=None
    )
    ALLOWED_HOSTS = values.ListValue(
        [
            "swoops-webapp.onrender.com",
            "127.0.0.1",
            "localhost",
            "swoops-gold.vercel.app",
        ]
    )

    # if variable is set to true, is async tasks will be executed locally
    # instead of sent to the queue
    CELERY_TASK_ALWAYS_EAGER = values.BooleanValue(False, environ_prefix=None)

    # if this param is set to true exceptions will be propogated immediatly
    CELERY_TASK_EAGER_PROPAGATES = values.BooleanValue(False, environ_prefix=None)

    # the task queue is stored as a default in memory
    CELERY_BROKER_URL = values.Value("memory://localhost/", environ_prefix=None)

    # Swagger-specific settings
    INSTALLED_APPS = Common.INSTALLED_APPS + ["drf_yasg"]

    SWAGGER_SETTINGS = {
        "DEFAULT_INFO": "swoops.urls.api_info",
    }

    EMAIL_BACKEND = values.Value(
        "django.core.mail.backends.console.EmailBackend", environ_prefix=None
    )

    SENDGRID_API_KEY = values.SecretValue(environ_prefix=None)
    SIMULATOR_CLIENT = values.Value(
        "simulator.client.MockIntegrationClient", environ_prefix=None
    )

    API_EXTERNAL_HOSTNAME = values.Value("127.0.0.1:8000", environ_prefix=None)


class Staging(Common):
    API_EXTERNAL_HOSTNAME = values.Value("api.playswoops.com", environ_prefix=None)

    # RENDER_EXTERNAL_HOSTNAME is provided by render at runtime to tell us the hostname
    # (an alias) of the current service that we want to allow requests to access
    RENDER_EXTERNAL_HOSTNAME = values.Value(environ_prefix=None)
    IS_PULL_REQUEST = values.BooleanValue(False, environ_prefix=None)

    @property
    def ALLOWED_HOSTS(self):
        hosts = [
            "swoops-webapp-staging.onrender.com",
            "swoops-webapp-5kxn.onrender.com",
            self.RENDER_EXTERNAL_HOSTNAME,
            self.API_EXTERNAL_HOSTNAME,
        ]
        if self.IS_PULL_REQUEST:
            hosts.append(".onrender.com")

        return hosts

    @property
    def CORS_ALLOWED_ORIGINS(self):
        return (
            [
                "https://swoops-webapp-staging.onrender.com",
                "https://swoops-gold.vercel.app",
                "https://app.playswoops.com",
                "https://playswoops.com",
            ]
            if not self.IS_PULL_REQUEST
            else []
        )

    @property
    def CORS_ALLOWED_ORIGIN_REGEXES(self):
        return [r"^https://[\w-]+\.vercel\.app$"] if self.IS_PULL_REQUEST else []

    CORS_ALLOW_CREDENTIALS = values.BooleanValue(True, environ_prefix=None)
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = "None"

    @property
    def SESSION_COOKIE_DOMAIN(self):
        return self.API_EXTERNAL_HOSTNAME

    # Tell Django to copy statics to the `staticfiles` directory
    # in your application directory on Render.
    @property
    def STATIC_ROOT(self):
        return os.path.join(self.BASE_DIR, "staticfiles")

    # Turn on WhiteNoise storage backend that takes care of compressing static files
    # and creating unique names for each version so they can safely be cached forever.
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    # configuring sendgrid email parameters
    SENDGRID_API_KEY = values.SecretValue(environ_prefix=None)


class Master(Staging):
    pass


class UAT(Staging):
    CORS_ALLOW_ALL_ORIGINS = True

    @property
    def ALLOWED_HOSTS(self):
        hosts = [
            "swoops-webapp-uat.onrender.com",
            self.RENDER_EXTERNAL_HOSTNAME,
            self.API_EXTERNAL_HOSTNAME,
        ]
        if self.IS_PULL_REQUEST:
            hosts.append(".onrender.com")

        return hosts

    @property
    def CORS_ALLOWED_ORIGINS(self):
        return (
            [
                "https://swoops-webapp-uat.onrender.com",
                "https://swoops-north.vercel.app",
                "https://app.playswoops.com",
                "https://playswoops.com",
            ]
            if not self.IS_PULL_REQUEST
            else []
        )

    @property
    def AWS_IMAGES_BUCKET_URL(self):
        return f"https://s3.us-west-2.amazonaws.com/{self.AWS_IMAGES_BUCKET_NAME}/"


class Production(Staging):
    @property
    def AWS_IMAGES_BUCKET_URL(self):
        return f"https://s3.us-west-2.amazonaws.com/{self.AWS_IMAGES_BUCKET_NAME}/"
